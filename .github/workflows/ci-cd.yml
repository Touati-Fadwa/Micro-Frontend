name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Nécessaire pour SonarQube
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage
    
    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: frontend
        args: >
          -Dsonar.projectKey=bibliotheque-frontend
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_REGISTRY }}/bibliotheque-frontend:${{ github.sha }},${{ secrets.DOCKER_REGISTRY }}/bibliotheque-frontend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/bibliotheque-frontend:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure K3s
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.K3S_CONFIG }}
    
    - name: Create K3s Deployment and Service
      run: |
        # Créer ou mettre à jour le déploiement
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: bibliotheque-frontend
          namespace: bibliotheque
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: bibliotheque-frontend
          template:
            metadata:
              labels:
                app: bibliotheque-frontend
            spec:
              containers:
              - name: frontend
                image: ${{ secrets.DOCKER_REGISTRY }}/bibliotheque-frontend:${{ github.sha }}
                ports:
                - containerPort: 80
                resources:
                  limits:
                    cpu: "0.5"
                    memory: "512Mi"
                  requests:
                    cpu: "0.2"
                    memory: "256Mi"
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 10
                  periodSeconds: 5
        EOF
        
        # Créer ou mettre à jour le service avec NodePort
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: bibliotheque-frontend-service
          namespace: bibliotheque
        spec:
          type: NodePort
          ports:
          - port: 80
            targetPort: 80
            nodePort: 30080
          selector:
            app: bibliotheque-frontend
        EOF
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/bibliotheque-frontend -n bibliotheque --timeout=180s
    
    - name: Rollback on failure
      if: failure()
      run: |
        kubectl rollout undo deployment/bibliotheque-frontend -n bibliotheque
        echo "Deployment failed, rolling back to previous version"

  monitoring:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Configure Datadog
      run: |
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d @- << EOF
        {
          "title": "Deployment: Frontend",
          "text": "New version deployed: ${{ github.sha }}",
          "tags": ["deployment", "frontend", "version:${{ github.sha }}"],
          "alert_type": "info"
        }
        EOF
    
    - name: Setup Datadog RUM monitoring
      run: |
        echo "Setting up Datadog RUM monitoring for frontend application"
        # Ici, vous pourriez mettre à jour une ConfigMap ou un Secret Kubernetes
        # contenant les clés d'API Datadog pour le monitoring frontend
        kubectl create configmap datadog-frontend-config --from-literal=api-key=${{ secrets.DATADOG_API_KEY }} --from-literal=app-key=${{ secrets.DATADOG_APP_KEY }} -n bibliotheque --dry-run=client -o yaml | kubectl apply -f -

  k9s-guide:
    needs: monitoring
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Guide pour travailler avec K9s sur K3s
      run: |
        echo "## Guide pour travailler avec K9s sur K3s"
        echo ""
        echo "1. Installer K9s: https://k9scli.io/"
        echo "2. Configurer K9s pour utiliser votre kubeconfig K3s:"
        echo "   export KUBECONFIG=/chemin/vers/votre/k3s.yaml"
        echo "3. Lancer K9s: k9s"
        echo ""
        echo "Commandes utiles dans K9s:"
        echo "- :deploy pour voir les déploiements"
        echo "- :svc pour voir les services"
        echo "- :pod pour voir les pods"
        echo "- Ctrl+d pour supprimer une ressource"
        echo "- Ctrl+k pour tuer un pod"
        echo "- d pour décrire une ressource"
        echo "- l pour voir les logs"
        echo ""
        echo "Pour accéder au frontend: http://IP_DU_NOEUD:30080"
