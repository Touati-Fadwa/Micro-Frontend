name: Full Stack CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  
  
  # Namespaces
  APP_NAMESPACE: bibliotheque
  
  # Images Docker
  FRONTEND_IMAGE: touatifadwa/bibliotheque-frontend

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Nécessaire pour SonarQube

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: CI='' npm run build

    - name: Run tests
      run: npm test -- --coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
          args: >
            -Dsonar.projectKey=Touati-Fadwa_Micro-Frontend
            -Dsonar.organization=touati-fadwa
            -Dsonar.sources=src
            -Dsonar.exclusions=**/*.test.tsx,**/*.test.ts,**/node_modules/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.branch.name=main

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/

  build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v4
      with:
        name: frontend-build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          ${{ env.FRONTEND_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure Kubernetes Access
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.K3S_CONFIG }}" | base64 -d > ~/.kube/config
        
        # Remplacer localhost par l'IP publique
        SERVER_IP=$(curl -s ifconfig.me)
        sed -i "s/127.0.0.1/${SERVER_IP}/g" ~/.kube/config
        
        # Sécuriser les permissions
        chmod 600 ~/.kube/config
        
        # Tester la connexion
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy Application
      run: |
        # Créer le namespace s'il n'existe pas
        kubectl create namespace ${{ env.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Déployer l'application
        kubectl apply -f k8s/deployment.yaml -n ${{ env.APP_NAMESPACE }}
        
        # Attendre que le déploiement soit prêt
        kubectl wait --for=condition=available \
          --timeout=300s \
          deployment/bibliotheque-frontend \
          -n ${{ env.APP_NAMESPACE }}
        
    - name: Display deployment information
      run: |
        echo "=== Deployment Status ==="
        kubectl get deploy -n ${{ env.APP_NAMESPACE }}
        
        echo "=== Service Details ==="
        kubectl get svc -n ${{ env.APP_NAMESPACE }}
        
        echo "=== Pods Status ==="
        kubectl get pods -n ${{ env.APP_NAMESPACE }}
        
        echo "Application accessible via:"
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc bibliotheque-frontend-service -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.spec.ports[0].nodePort}')
        echo "http://$NODE_IP:$NODE_PORT"
  argocd-sync:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      # 1. Installation du CLI ArgoCD
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin
          argocd version --client

      # 2. Connexion à ArgoCD
      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_server }} \
            --username ${{ secrets.ARGOCD_username }} \
            --password ${{ secrets.ARGOCD_password }} \
            --grpc-web

      # 3. Déploiement et synchronisation
      - name: Deploy and Sync Application
        run: |
          # Création simplifiée de l'application
          if ! argocd app get bibliotheque-frontend; then
            argocd app create bibliotheque-frontend \
              --repo https://github.com/votre-repo/bibliotheque.git \
              --path k8s/manifests \
              --dest-namespace default \
              --dest-server https://kubernetes.default.svc \
              --sync-policy automated \
              --auto-prune
          fi

          # Synchronisation forcée
          argocd app sync bibliotheque-frontend --force
          
          # Attente et vérification simplifiée
          argocd app wait bibliotheque-frontend --healthy --timeout 180
          argocd app get bibliotheque-frontend | grep -q "Synced.*Healthy" || exit 1