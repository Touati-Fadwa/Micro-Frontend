name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # N√©cessaire pour SonarQube

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: üèóÔ∏è Build frontend
      run: CI='' npm run build

    - name: üì¶ Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/

    - name: Run tests
      run: npm test -- --coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Touati-Fadwa_Micro-Frontend
          -Dsonar.organization=touati-fadwa
          -Dsonar.sources=src
          -Dsonar.exclusions=**/*.test.tsx,**/*.test.ts,**/node_modules/**
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.branch.name=main

  build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with: 
        driver: docker-container
        install: true

    - name: üì¶ Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/
        overwrite: true 

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: touatifadwa/bibliotheque-frontend:${{ github.sha }},touatifadwa/bibliotheque-frontend:latest
        cache-from: type=registry,ref=touatifadwa/bibliotheque-frontend:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure K3s
      run: |
        # Cr√©er le dossier .kube
        mkdir -p ~/.kube
    
        # D√©coder et enregistrer la config (m√©thode robuste)
        echo "${{ secrets.K3S_CONFIG }}" > temp.b64
        base64 -d temp.b64 > ~/.kube/config
        rm -f temp.b64
    
        # Appliquer les bonnes permissions
        chmod 600 ~/.kube/config
    
        # V√©rifier la connexion
        kubectl cluster-info
        kubectl get nodes

    - name: Create K3s Deployment and Service
      run: |
        # Applique la configuration compl√®te
        kubectl apply -f k8s/deployment.yaml

    - name: Verify deployment
      run: |
          # V√©rification du d√©ploiement
            kubectl wait --for=condition=available \
             --timeout=300s \
              deployment/bibliotheque-frontend \
               -n bibliotheque
  
                  # Affichage des informations de d√©ploiement
                 echo "=== Deployment Status ==="
                 kubectl get deploy -n bibliotheque
  
                echo "=== Service Details ==="
                kubectl get svc -n bibliotheque
  
                echo "=== Pods Status ==="
                kubectl get pods -n bibliotheque
  
              # G√©n√©ration de l'URL d'acc√®s
               echo "Application accessible via:"
               NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
             NODE_PORT=$(kubectl get svc bibliotheque-frontend-service -n bibliotheque -o jsonpath='{.spec.ports[0].nodePort}')
             echo "http://$NODE_IP:$NODE_PORT"

    - name: Rollback on failure
      if: failure()
      run: |
        kubectl rollout undo deployment/bibliotheque-frontend -n bibliotheque
        echo "Deployment failed, rolling back to previous version"


  monitoring:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: üîß Configurer kubectl
      run: |
           mkdir -p ~/.kube
           sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
           sudo chown $USER:$USER ~/.kube/config
            sed -i "s/127.0.0.1/$(hostname -I | awk '{print $1}')/g" ~/.kube/config
    
    - name: Create monitoring namespace
      run: |
        kubectl create namespace monitoring
    
    - name: Deploy Prometheus
      run: |
        # ConfigMap pour Prometheus
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: prometheus-config
          namespace: monitoring
        data:
          prometheus.yml: |
            global:
              scrape_interval: 15s
              evaluation_interval: 15s
            
            scrape_configs:
              - job_name: 'kubernetes-nodes'
                kubernetes_sd_configs:
                  - role: node
                relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_node_label_(.+)
              
              - job_name: 'kubernetes-pods'
                kubernetes_sd_configs:
                  - role: pod
                relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: kubernetes_pod_name
              
              - job_name: 'bibliotheque-services'
                kubernetes_sd_configs:
                  - role: service
                  - namespaces:
                      names:
                        - bibliotheque
                relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_service_name]
                    action: replace
                    target_label: kubernetes_name
        EOF
        
        # D√©ploiement de Prometheus
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: prometheus
          namespace: monitoring
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: prometheus
          template:
            metadata:
              labels:
                app: prometheus
            spec:
              containers:
              - name: prometheus
                image: prom/prometheus:v2.40.0
                args:
                  - "--config.file=/etc/prometheus/prometheus.yml"
                  - "--storage.tsdb.path=/prometheus"
                ports:
                - containerPort: 9090
                volumeMounts:
                - name: prometheus-config
                  mountPath: /etc/prometheus
                - name: prometheus-storage
                  mountPath: /prometheus
              volumes:
              - name: prometheus-config
                configMap:
                  name: prometheus-config
              - name: prometheus-storage
                emptyDir: {}
        EOF
        
        # Service pour Prometheus
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: prometheus
          namespace: monitoring
        spec:
          selector:
            app: prometheus
          ports:
          - port: 9090
            targetPort: 9090
          type: ClusterIP
        EOF
    
    - name: Deploy Grafana
      run: |
        # ConfigMap pour les datasources Grafana
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-datasources
          namespace: monitoring
        data:
          prometheus.yaml: |
            apiVersion: 1
            datasources:
              - name: Prometheus
                type: prometheus
                url: http://prometheus:9090
                access: proxy
                isDefault: true
        EOF
        
        # ConfigMap pour les dashboards Grafana
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-dashboards
          namespace: monitoring
        data:
          k3s-dashboard.json: |
            {
              "annotations": {
                "list": [
                  {
                    "builtIn": 1,
                    "datasource": "-- Grafana --",
                    "enable": true,
                    "hide": true,
                    "iconColor": "rgba(0, 211, 255, 1)",
                    "name": "Annotations & Alerts",
                    "type": "dashboard"
                  }
                ]
              },
              "editable": true,
              "gnetId": null,
              "graphTooltip": 0,
              "id": 1,
              "links": [],
              "panels": [
                {
                  "aliasColors": {},
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "Prometheus",
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 0,
                    "y": 0
                  },
                  "hiddenSeries": false,
                  "id": 2,
                  "legend": {
                    "avg": false,
                    "current": false,
                    "max": false,
                    "min": false,
                    "show": true,
                    "total": false,
                    "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                    "dataLinks": []
                  },
                  "percentage": false,
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [],
                  "spaceLength": 10,
                  "stack": false,
                  "steppedLine": false,
                  "targets": [
                    {
                      "expr": "sum(rate(container_cpu_usage_seconds_total{namespace=\\"bibliotheque\\"}[5m])) by (pod)",
                      "refId": "A"
                    }
                  ],
                  "thresholds": [],
                  "timeFrom": null,
                  "timeRegions": [],
                  "timeShift": null,
                  "title": "CPU Usage by Pod",
                  "tooltip": {
                    "shared": true,
                    "sort": 0,
                    "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                    "buckets": null,
                    "mode": "time",
                    "name": null,
                    "show": true,
                    "values": []
                  },
                  "yaxes": [
                    {
                      "format": "short",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    },
                    {
                      "format": "short",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    }
                  ],
                  "yaxis": {
                    "align": false,
                    "alignLevel": null
                  }
                },
                {
                  "aliasColors": {},
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "Prometheus",
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 12,
                    "y": 0
                  },
                  "hiddenSeries": false,
                  "id": 4,
                  "legend": {
                    "avg": false,
                    "current": false,
                    "max": false,
                    "min": false,
                    "show": true,
                    "total": false,
                    "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                    "dataLinks": []
                  },
                  "percentage": false,
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [],
                  "spaceLength": 10,
                  "stack": false,
                  "steppedLine": false,
                  "targets": [
                    {
                      "expr": "sum(container_memory_usage_bytes{namespace=\\"bibliotheque\\"}) by (pod)",
                      "refId": "A"
                    }
                  ],
                  "thresholds": [],
                  "timeFrom": null,
                  "timeRegions": [],
                  "timeShift": null,
                  "title": "Memory Usage by Pod",
                  "tooltip": {
                    "shared": true,
                    "sort": 0,
                    "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                    "buckets": null,
                    "mode": "time",
                    "name": null,
                    "show": true,
                    "values": []
                  },
                  "yaxes": [
                    {
                      "format": "bytes",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    },
                    {
                      "format": "short",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    }
                  ],
                  "yaxis": {
                    "align": false,
                    "alignLevel": null
                  }
                },
                {
                  "aliasColors": {},
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "Prometheus",
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 0,
                    "y": 8
                  },
                  "hiddenSeries": false,
                  "id": 6,
                  "legend": {
                    "avg": false,
                    "current": false,
                    "max": false,
                    "min": false,
                    "show": true,
                    "total": false,
                    "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                    "dataLinks": []
                  },
                  "percentage": false,
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [],
                  "spaceLength": 10,
                  "stack": false,
                  "steppedLine": false,
                  "targets": [
                    {
                      "expr": "sum(rate(container_network_receive_bytes_total{namespace=\\"bibliotheque\\"}[5m])) by (pod)",
                      "refId": "A"
                    }
                  ],
                  "thresholds": [],
                  "timeFrom": null,
                  "timeRegions": [],
                  "timeShift": null,
                  "title": "Network Receive by Pod",
                  "tooltip": {
                    "shared": true,
                    "sort": 0,
                    "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                    "buckets": null,
                    "mode": "time",
                    "name": null,
                    "show": true,
                    "values": []
                  },
                  "yaxes": [
                    {
                      "format": "bytes",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    },
                    {
                      "format": "short",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    }
                  ],
                  "yaxis": {
                    "align": false,
                    "alignLevel": null
                  }
                },
                {
                  "aliasColors": {},
                  "bars": false,
                  "dashLength": 10,
                  "dashes": false,
                  "datasource": "Prometheus",
                  "fill": 1,
                  "fillGradient": 0,
                  "gridPos": {
                    "h": 8,
                    "w": 12,
                    "x": 12,
                    "y": 8
                  },
                  "hiddenSeries": false,
                  "id": 8,
                  "legend": {
                    "avg": false,
                    "current": false,
                    "max": false,
                    "min": false,
                    "show": true,
                    "total": false,
                    "values": false
                  },
                  "lines": true,
                  "linewidth": 1,
                  "nullPointMode": "null",
                  "options": {
                    "dataLinks": []
                  },
                  "percentage": false,
                  "pointradius": 2,
                  "points": false,
                  "renderer": "flot",
                  "seriesOverrides": [],
                  "spaceLength": 10,
                  "stack": false,
                  "steppedLine": false,
                  "targets": [
                    {
                      "expr": "sum(rate(container_network_transmit_bytes_total{namespace=\\"bibliotheque\\"}[5m])) by (pod)",
                      "refId": "A"
                    }
                  ],
                  "thresholds": [],
                  "timeFrom": null,
                  "timeRegions": [],
                  "timeShift": null,
                  "title": "Network Transmit by Pod",
                  "tooltip": {
                    "shared": true,
                    "sort": 0,
                    "value_type": "individual"
                  },
                  "type": "graph",
                  "xaxis": {
                    "buckets": null,
                    "mode": "time",
                    "name": null,
                    "show": true,
                    "values": []
                  },
                  "yaxes": [
                    {
                      "format": "bytes",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    },
                    {
                      "format": "short",
                      "label": null,
                      "logBase": 1,
                      "max": null,
                      "min": null,
                      "show": true
                    }
                  ],
                  "yaxis": {
                    "align": false,
                    "alignLevel": null
                  }
                }
              ],
              "refresh": "10s",
              "schemaVersion": 22,
              "style": "dark",
              "tags": [],
              "templating": {
                "list": []
              },
              "time": {
                "from": "now-6h",
                "to": "now"
              },
              "timepicker": {
                "refresh_intervals": [
                  "5s",
                  "10s",
                  "30s",
                  "1m",
                  "5m",
                  "15m",
                  "30m",
                  "1h",
                  "2h",
                  "1d"
                ]
              },
              "timezone": "",
              "title": "BiblioTech Dashboard",
              "uid": "bibliotech",
              "version": 1
            }
          dashboard-providers.yaml: |
            apiVersion: 1
            providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards
        EOF
        
        # D√©ploiement de Grafana
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: grafana
          namespace: monitoring
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: grafana
          template:
            metadata:
              labels:
                app: grafana
            spec:
              containers:
              - name: grafana
                image: grafana/grafana:9.3.0
                ports:
                - containerPort: 3000
                env:
                - name: GF_SECURITY_ADMIN_USER
                  value: admin
                - name: GF_SECURITY_ADMIN_PASSWORD
                  value: admin
                - name: GF_USERS_ALLOW_SIGN_UP
                  value: "false"
                volumeMounts:
                - name: grafana-storage
                  mountPath: /var/lib/grafana
                - name: grafana-datasources
                  mountPath: /etc/grafana/provisioning/datasources
                - name: grafana-dashboards
                  mountPath: /var/lib/grafana/dashboards
                - name: grafana-dashboard-providers
                  mountPath: /etc/grafana/provisioning/dashboards
              volumes:
              - name: grafana-storage
                emptyDir: {}
              - name: grafana-datasources
                configMap:
                  name: grafana-datasources
              - name: grafana-dashboards
                configMap:
                  name: grafana-dashboards
                  items:
                  - key: k3s-dashboard.json
                    path: k3s-dashboard.json
              - name: grafana-dashboard-providers
                configMap:
                  name: grafana-dashboards
                  items:
                  - key: dashboard-providers.yaml
                    path: dashboards.yaml
        EOF
        
        # Service pour Grafana
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: grafana
          namespace: monitoring
        spec:
          selector:
            app: grafana
          ports:
          - port: 3000
            targetPort: 3000
          type: NodePort
          nodePort: 30300
        EOF
    
    - name: Create monitoring guide
      run: |
        echo "## Guide de monitoring K3s avec Grafana"
        echo ""
        echo "Le monitoring a √©t√© d√©ploy√© avec succ√®s. Voici comment y acc√©der:"
        echo ""
        echo "### Acc√®s √† Grafana"
        echo "- URL: http://IP_DU_NOEUD:30300"
        echo "- Identifiants: admin/admin"
        echo ""
        echo "### Dashboard pr√©configur√©"
        echo "Un dashboard 'BiblioTech Dashboard' est disponible avec les m√©triques suivantes:"
        echo "- Utilisation CPU par pod"
        echo "- Utilisation m√©moire par pod"
        echo "- Trafic r√©seau entrant/sortant par pod"
        echo ""
        echo "### Acc√®s √† Prometheus"
        echo "- URL: http://IP_DU_NOEUD:30090 (si vous exposez le service)"
        echo ""
        echo "### Annotations pour les pods"
        echo "Pour que vos pods soient automatiquement d√©couverts par Prometheus, ajoutez ces annotations:"
        echo "```yaml"
        echo "metadata:"
        echo "  annotations:"
        echo "    prometheus.io/scrape: \"true\""
        echo "    prometheus.io/port: \"<port>\""
        echo "    prometheus.io/path: \"/metrics\""
        echo "```"

  k9s-guide:
    needs: monitoring
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Guide pour travailler avec K9s sur K3s
      run: |
        echo "## Guide pour travailler avec K9s sur K3s"
        echo ""
        echo "1. Installer K9s: https://k9scli.io/"
        echo "2. Configurer K9s pour utiliser votre kubeconfig K3s:"
        echo "   export KUBECONFIG=/chemin/vers/votre/k3s.yaml"
        echo "3. Lancer K9s: k9s"
        echo ""
        echo "Commandes utiles dans K9s:"
        echo "- :deploy pour voir les d√©ploiements"
        echo "- :svc pour voir les services"
        echo "- :pod pour voir les pods"
        echo "- Ctrl+d pour supprimer une ressource"
        echo "- Ctrl+k pour tuer un pod"
        echo "- d pour d√©crire une ressource"
        echo "- l pour voir les logs"
        echo ""
        echo "Pour acc√©der au frontend: http://IP_DU_NOEUD:30080"
        echo "Pour acc√©der √† Grafana: http://IP_DU_NOEUD:30300"