name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # N√©cessaire pour SonarQube

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: üèóÔ∏è Build frontend
      run: CI='' npm run build

    - name: üì¶ Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/

    - name: Run tests
      run: npm test -- --coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Touati-Fadwa_Micro-Frontend
          -Dsonar.organization=touati-fadwa
          -Dsonar.sources=src
          -Dsonar.exclusions=**/*.test.tsx,**/*.test.ts,**/node_modules/**
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.branch.name=main

  build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with: 
        driver: docker-container
        install: true

    - name: üì¶ Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/
        overwrite: true 

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: touatifadwa/bibliotheque-frontend:${{ github.sha }},touatifadwa/bibliotheque-frontend:latest
        cache-from: type=registry,ref=touatifadwa/bibliotheque-frontend:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure K3s
      run: |
        # Cr√©er le dossier .kube
        mkdir -p ~/.kube
    
        # D√©coder et enregistrer la config (m√©thode robuste)
        echo "${{ secrets.K3S_CONFIG }}" > temp.b64
        base64 -d temp.b64 > ~/.kube/config
        rm -f temp.b64
    
        # Appliquer les bonnes permissions
        chmod 600 ~/.kube/config
    
        # V√©rifier la connexion
        kubectl cluster-info
        kubectl get nodes

    - name: Create K3s Deployment and Service
      run: |
        # Applique la configuration compl√®te
        kubectl apply -f k8s/deployment.yaml

    - name: Verify deployment
      run: |
          # V√©rification du d√©ploiement
            kubectl wait --for=condition=available \
             --timeout=300s \
              deployment/bibliotheque-frontend \
               -n bibliotheque
  
                  # Affichage des informations de d√©ploiement
                 echo "=== Deployment Status ==="
                 kubectl get deploy -n bibliotheque
  
                echo "=== Service Details ==="
                kubectl get svc -n bibliotheque
  
                echo "=== Pods Status ==="
                kubectl get pods -n bibliotheque
  
              # G√©n√©ration de l'URL d'acc√®s
               echo "Application accessible via:"
               NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
             NODE_PORT=$(kubectl get svc bibliotheque-frontend-service -n bibliotheque -o jsonpath='{.spec.ports[0].nodePort}')
             echo "http://$NODE_IP:$NODE_PORT"

    - name: Rollback on failure
      if: failure()
      run: |
        kubectl rollout undo deployment/bibliotheque-frontend -n bibliotheque
        echo "Deployment failed, rolling back to previous version"


  cluster-monitoring:
      needs: deploy
      runs-on: self-hosted
      timeout-minutes: 20
      steps:
        - name: üîß Configurer kubectl
          run: |
            mkdir -p ~/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
            sudo chown $USER:$USER ~/.kube/config
            sed -i "s/127.0.0.1/$(hostname -I | awk '{print $1}')/g" ~/.kube/config

        - name: ‚éà Installer la stack monitoring
          run: |
            kubectl create namespace monitoring || true
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set grafana.adminUser="${{ secrets.GRAFANA_ADMIN_USER }}" \
            --set grafana.adminPassword="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --set prometheus.service.type=NodePort \
            --set prometheus.service.nodePort=$PROMETHEUS_PORT \
            --set grafana.service.type=NodePort \
            --set grafana.service.nodePort=$GRAFANA_PORT \
            --set alertmanager.service.type=NodePort \
            --set alertmanager.service.nodePort=$ALERTMANAGER_PORT

        - name: üåê Afficher les acc√®s
          run: |
           echo "=== MONITORING ==="
           echo "Grafana : http://$(hostname -I | awk '{print $1}'):$GRAFANA_PORT"
           echo "Prometheus : http://$(hostname -I | awk '{print $1}'):$PROMETHEUS_PORT"
           echo "AlertManager : http://$(hostname -I | awk '{print $1}'):$ALERTMANAGER_PORT"
           echo "-----------------"
           echo "Identifiants Grafana : Voir les secrets GitHub"
           echo "=== ACC√àS APPLICATION ==="
           echo "Frontend : http://$(hostname -I | awk '{print $1}'):$NODE_PORT"
           echo "Portainer : http://$(hostname -I | awk '{print $1}'):$PORTAINER_PORT"