name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Nécessaire pour SonarQube

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: 🏗️ Build frontend
      run: CI='' npm run build

    - name: 📦 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/

    - name: Run tests
      run: npm test -- --coverage

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Touati-Fadwa_Micro-Frontend
          -Dsonar.organization=touati-fadwa
          -Dsonar.sources=src
          -Dsonar.exclusions=**/*.test.tsx,**/*.test.ts,**/node_modules/**
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.branch.name=main

  build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with: 
        driver: docker-container
        install: true

    - name: 📦 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/
        overwrite: true 

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/bibliotheque-frontend:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/bibliotheque-frontend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/bibliotheque-frontend:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure K3s
      run: |
       mkdir -p ~/.kube
       echo "${{ secrets.K3S_CONFIG }}" | base64 -d > ~/.kube/config  # Add base64 decoding
       chmod 600 ~/.kube/config
       kubectl get nodes

    - name: Create K3s Deployment and Service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: bibliotheque-frontend
          namespace: bibliotheque
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: bibliotheque-frontend
          template:
            metadata:
              labels:
                app: bibliotheque-frontend
            spec:
              containers:
              - name: frontend
                image: ${{ secrets.DOCKER_USERNAME }}/bibliotheque-frontend:${{ github.sha }}
                ports:
                - containerPort: 80
                resources:
                  limits:
                    cpu: "0.5"
                    memory: "512Mi"
                  requests:
                    cpu: "0.2"
                    memory: "256Mi"
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 10
                  periodSeconds: 5
        EOF

        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: bibliotheque-frontend-service
          namespace: bibliotheque
        spec:
          type: NodePort
          ports:
          - port: 80
            targetPort: 80
            nodePort: 30080
          selector:
            app: bibliotheque-frontend
        EOF

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/bibliotheque-frontend -n bibliotheque --timeout=180s
        # Display deployment information
              echo "=== Deployment Status ==="
              kubectl get deploy -n $KUBE_NAMESPACE
              
              echo "=== Service Details ==="
              kubectl get svc -n $KUBE_NAMESPACE
              
              echo "=== Pods Status ==="
              kubectl get pods -n $KUBE_NAMESPACE
              
              # Generate access URL
              echo "Application accessible via:"
              NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
              NODE_PORT=$(kubectl get svc bibliotheque-auth-service -n $KUBE_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
              echo "http://$NODE_IP:$NODE_PORT"

    - name: Rollback on failure
      if: failure()
      run: |
        kubectl rollout undo deployment/bibliotheque-frontend -n bibliotheque
        echo "Deployment failed, rolling back to previous version"
