name: Full Stack CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAMESPACE: bibliotheque
  FRONTEND_IMAGE: touatifadwa/bibliotheque-frontend

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci
      

    - name: Build project
      run: CI='' npm run build

    - name: Run tests
      run: npm test

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Touati-Fadwa_Micro-Frontend
          -Dsonar.organization=touati-fadwa
          -Dsonar.sources=src
          -Dsonar.exclusions=**/*.test.tsx,**/*.test.ts,**/node_modules/**
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.branch.name=main

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: build/

 
  build-and-push:
    needs: build-and-test
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: frontend-build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Configure Kubernetes Access
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.K3S_CONFIG }}" | base64 -d > ~/.kube/config
        
        SERVER_IP=$(curl -s ifconfig.me)
        sed -i "s/127.0.0.1/${SERVER_IP}/g" ~/.kube/config
        
        chmod 600 ~/.kube/config

        kubectl cluster-info
        kubectl get nodes
        

    - name: Deploy Application
      run: |
        kubectl apply -f k8s/deployment.yaml -n ${{ env.APP_NAMESPACE }}

    - name: Display deployment information
      run: |
        echo "=== Deployment Status ==="
        kubectl get deploy -n ${{ env.APP_NAMESPACE }}
        
        echo "=== Service Details ==="
        kubectl get svc -n ${{ env.APP_NAMESPACE }}
        
        echo "=== Pods Status ==="
        kubectl get pods -n ${{ env.APP_NAMESPACE }}
        
        echo "Application accessible via:"
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc bibliotheque-frontend-service -n ${{ env.APP_NAMESPACE }} -o jsonpath='{.spec.ports[0].nodePort}')
        echo "http://$NODE_IP:$NODE_PORT"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Échec du déploiement détecté. Lancement du rollback..."
        kubectl rollout undo deployment/bibliotheque-frontend -n ${{ env.APP_NAMESPACE }} || true